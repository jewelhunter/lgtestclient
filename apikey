
* @param string $class
   *
   * @returns string The name of the class, with namespacing and underscores
   *    stripped.
   */
  public static function className($class)
  {
    // Useful for namespaces: Foo\Divido_Charge
    if ($postfixNamespaces = strrchr($class, '\\')) {
      $class = substr($postfixNamespaces, 1);
    }
    // Useful for underscored 'namespaces': Foo_Divido_Charge
    if ($postfixFakeNamespaces = strrchr($class, 'Divido_')) {
      $class = $postfixFakeNamespaces;
    }
    if (substr($class, 0, strlen('Divido')) == 'Divido') {
      $class = substr($class, strlen('Divido'));
    }
    $class = str_replace('_', '', $class);
    $name = urlencode($class);
    $name = strtolower($name);
    return $name;





},
                {
                    "apiKey": "4023e341-57b2-429e-a90e-951d4366a7d4",
                    "name": "lgmockclient",
                    "Login": Jewels
                },
                
                def execute():
	# Move User Data into DocType
	frappe.reload_doc("core", "doctype", "user", force=True)
	frappe.reload_doc("core", "doctype", "user_social_login", force=True)
	users = frappe.get_all("User", filters=[["username", "not in", ["Guest","Administrator"]]])
	for u in users:
		user = frappe.get_doc("User", u.get("name"))
		save = False

		if user.get("fb_userid") and user.get("fb_username"):
			user.append("social_logins", {
				"provider": "facebook",
				"userid": user.get("fb_userid"),
				"username": user.get("fb_username")
			})
			save = True

		if user.get("frappe_userid"):
			user.append("social_logins", {
				"provider": "frappe",
				"userid": user.get("frappe_userid")
